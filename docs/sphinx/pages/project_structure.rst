Структура проекта
=================

Pitchfork
---------

Общая структура и принципы построения структур проекта описаны в этом мануале:
`Pitchfork project layout <https://api.csswg.org/bikeshed/?force=1&url=
https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/
spec.bs>`_. Данный мануал — попытка создания стандартизированной структуры C++
проекта. Не всё в ней идеально и понятно, но в целом достаточно подробно
описано.

Корневая директория
-------------------

Папки корневой директории проекта соответствуют Pitchfork, однако используются
не все. Список актуальных на данный момент папок:

- **build** — папка, в которую генерируются все артефакты при сборке проекта, в
  том числе временные файлы CMake и бинарники. *Должна быть исключена из git*;

- **include** — содержит заголовочные файлы, которые должны быть доступны для
  использования извне. По большей части данная директория необходима
  библиотекам. В ней содержится, то, что называется "public API headers".
  Например, вы хотите переиспользовать код одного проекта в другом и
  подключаете его как git модуль, то данная директория должна быть доступна
  для использования другим проетом.

  В большинстве проектов в данной папке содержится только файл версии
  ``vesion.hpp``, генерируемый на этапе компиляции.
  Этот файл *должен быть исключён из git*;

- **src** — в данной папке располагаются все исходники проекта. Подробнее
  содержимое папки описано ниже;

- **external** — содержит все внешние библиотеки, которые используется в
  проекте. Чаще всего содержит git модули с библиотеками. Так же включает
  ``CMakeLists.txt`` файл для подключения и настройки целей библиотек;

- **tools** — содержит конфиги для IDE, отладчика, svd-файлы,
  скрипты-генераторы и прочие файлы используемые в при разработке проекта;

- **docs** — документация проекта. Обычно включает папку ``sphinx``, в которой
  располагаются исходники документации для генерации в ReadTheDocs.

  Может содержать другие файлы документации, например схему, сгенерированные
  схемотехниками, листинги и прочие.

- **.vscode** — содержит VS Code специфичные файлы настроек. Подробнее будет
  описано ниже.

  - **c_cpp_properties.json** —
    настройки `C/C++ расширения
    <https://code.visualstudio.com/docs/cpp/customize-default-settings-cpp>`__
  - **cmake-kits.json** — перечисление доступных toolchain для
    расширения `CMake Tools <https://vector-of-bool.github.io/
    docs/vscode-cmake-tools/kits.html>`__
  - **launch.json** — настройка `отладки <https://code.
    visualstudio.com/docs/editor/debugging>`__ приложения
    для `расширения Cortex Debug <https://marketplace.
    visualstudio.com/items?itemName=marus25.cortex-debug>`__
  - **.gitignore** — игнорируемые git файлы, должны быть
    *включены все файлы, кроме перечисленных выше*;

- **.gitlab** — содержит шаблон merge request (MR) для `Gitlab <https://gitlab.
  thirdpin.io>`_. Используется Gitlab при создании MR через интерфейс Gitlab.

- **.devcontainer** — содержит описание окружения для разработки на основе
  контейнеров. Используется VS Code. Подробнее про использование: `Разработка в
  контейнере <http://wiki.pin/doku.php/programmers/tools/ide_for_cpp#
  разработка_в_контейнере>`__.

Так же в корне располагаются некоторые файлы, которые нельзя расположить где-то
ещё в силу специфики работы инструментов их использующих:

- **.clang-format** — файл настроек для инструмента автоформатирования кода
  `ClangFormat <http://clang.llvm.org/docs/ClangFormat.html>`_. Требует
  ``cland-format`` доступный в окружении;

- **.cmake-format.py** — файл настроек для инструмента автоформатирования
  CMake-листингов `cmake-format
  <https://github.com/cheshirekow/cmake_format>`_. Требует установленный пакет
  ``cmakelang`` в окружении;

   .. Note::
      Для автоформатирования ``CMakeLists.txt`` в VS Code можно использовать
      расширение `cheshirekow.cmake-format
      <https://marketplace.visualstudio.com/items?itemName=cheshirekow.cmake-format>`__.
      Для корректной работы следует в настройках VS Code указать полный путь до
      запускаемого файла ``cmake-format``. Иначе, на момент версии расширения
      0.6.11, расширение отказывается запускаться.

- **.gitignore** — основной список файлов и папок игнорируемых системой
  контроля версий git;

- **.gitlab-ci.yml** — файл для конфигурации `GitLab CI/CD pipelines <https://
  docs.gitlab.com/ee/ci/pipelines/>`_;

- **.gitmodules** — файл используемый системой контроля версий git для указания
  подключаемых к проекту `git-модулей <https://git-scm.com/docs/gitmodules>`_ ;

- **.readthedocs.yml** — файл конфигурации системы сборки документации
  `ReadTheDocs <http://readthe.pin>`_;

- **cmake-variants.yaml** —  файл необходимый расширению `CMake Tools для VS
  Code <https://vector-of-bool.github.io/docs/vscode-cmake-tools/
  variants.html>`_ для задания аргументов, передаваемых CMake на этапе
  конфигурации (configure);

- **CMakeLists.txt** — корневой листинг системы сборки CMake. Подробнее про
  CMake ниже.

- **README.rst** — краткое описание проекта. Обычно название и ссылка на
  документацию ReadTheDocs.


Исходный код проекта (папка src)
--------------------------------

.. Important::
    Если вы не знаете, что такое CMake, не разбираетесь в понятиях,
    которыми он оперирует, то вам необходимо разобраться. Без этого
    полноценное понимание данного пункта, а так же правильное
    использование шаблона, невозможно. Ссылки на статьи для изучения
    CMake можно найти вот тут: `Настройка и использование CMake
    <http://redmine.pin/easy_knowledge_stories/116>`__


Для кроссплатформенной и унифицированной компиляции проекта
используется `CMake <https://en.wikipedia.org/wiki/CMake>`__.
Обязательным требованием к использованию данного шаблона является
его понимание, а так же наличие в ``PATH`` пути до ``cmake.exe`` —
запускаемого файла CMake. Требуемая версия: 3.17 и выше.

../src
''''''

Основной код проекта находиться в папке **src**, однако корнем
CMake проекта корень репозитория. В нём находится корневой CMake-файл.
Данный файл содержит в себе включение всех необходимых кросс проектных
макросов и библиотек. Данный файл не изменяется между проектами, за
исключением имени *проекта верхнего уровня*, указанного в нём.

src
'''

В корневом ``CMakeLists.txt`` включается в сбоку папка **src**. Данная папка
содержит в себе все исходники проекта, а основной ``CMakeLists.txt`` проекта. В
папке должен располагаться ``main.cpp`` — точка входа в приложение. Все
остальные исходники должны находиться в поддиректориях.

src/ldscripts
'''''''''''''

Содержит скрипты линкера.


Добавление библиотек
--------------------

Библиотеки располагаются в папке **/external**. Добавление библиотек к сборке
осуществляется с помощью команды ``add_subdirectory`` в файл
``/external/CMakeLists.txt``. Если библиотека не поддерживает сборку с помощью
CMake, то необходимо (на примере библиотеки `yxml
<https://code.blicky.net/yorhel/yxml>`__):

1. Инкапсулировать библиотеку дополнительно в директорию с именем
   библиотеки. Например, изначальная если изначальная структура
   библиотеки следующая:

   .. code-block::

     yxml
      › yxml.c
      › yxml.h
      › ...

   необходимо инкапсулировать библиотеку в папку с именем **yxml**,
   т.е.:

   .. code-block::

      yxml
        yxml
          › yxml.c
          › yxml.h
          › ...
        › CMakeLists.txt

2. Создать файл ``yxml/CMakeLists.txt``, в нём создать цель сборки
   (target) для библиотеки. В качестве имени цели сборки использовать
   название библиотеки. Указать папку ``yxml`` в качестве пути до
   заголовочных файлов:

   .. code-block:: cmake

       target_include_directories(yxml
           PUBLIC
               ${CMAKE_CURRENT_LIST_DIR}
           PRIVATE
               ${CMAKE_CURRENT_LIST_DIR}/yxml
       )

   Таким образом, при линковке данной библиотеки к другим целям
   сборки будет возможность обратиться к заголовочным файлам
   библиотеки используя префикс: :cpp:`#include <yxml/yxml.h>`.

   Секция `PRIVATE` необходима для того, чтобы библиотека могла
   найти собственные заголовочные файлы (не актуально для
   библиотек, в которых используются относительные пути до
   заголовочных файлов). Секция `PRIVATE` возможна только для
   статической библиотеки.

3. Не header-only библиотеки предпочтительно делать статическими
   (``STATIC``).

4. Добавить библиотеку с помощью команды ``add_subdirectory(yxml)``
   в файле ``/external/CMakeLists.txt``.

Исключение составляет библиотека OpenCM3. Для её компиляции необходимо
использовать макрос ``add_libopencm3_for``. Пример использования макроса
есть в файле ``/external/CMakeLists.txt``.


Версия проекта
--------------

Каждый проект должен иметь собственную версию. Версия генерируется в процессе
компиляции и записывается в файл **/include/<project_name>/version.hpp**. Для
генерации версии используется макрос ``add_version_target(${PROJECT_NAME})``,
который создаёт цель вида ``${PROJECT_NAME}::version``. Эта цель должна быть
прилинкована к основной цели подпроекта.
