.. _how_to_build:

Как собрать
###########

Для начала работы с проектом стоит ознакомиться со статьёй, в которой описаны
рекомендованные подходы к разворачиванию сборочного окружения.

- `VS Code: C++ <http://wiki.pin/doku.php/programmers/tools/ide_for_cpp>`_ —
  установка и настройка IDE (Visual Studio Code) для работы с C++ проектами.

Порядок сборки
==============

.. note::

    Далее будет описана сборка исключительно с использованием консоли. Описание
    настройки сборки из-под IDE ищите в Wiki.

    Получить доступ к консоли devcontainer можно как в терминале внутри vscode,
    так и запустив контейнер отдельно. Подробнее в: `Работа из консоли
    <http://wiki.pin/doku.php/programmers/tools/docker#работа_из_консоли>`_.

Перед началом сборки необходимо создать папку **/emb/build** и перейти
в неё.


Конфигурация
------------

Для запуска конфигурации необходимо указать флаги:

- `\-DCMAKE_TOOLCHAIN_FILE` — пусть до toolchain-файла, выбирается
  в зависимости от компилятора. Для Clang это
  "cmake/toolchains/toolchain-clang.cmake";

- `\-DCMAKE_BUILD_TYPE` — тип сборки два основных это *Debug* и
  *Release*. В последнем во время компиляции добавляются флаги оптимизации
  (обычно O3), убираются символы отладки из бинарика и добавляется дефайн
  :cpp:`NDEBUG`. Другие типы сборки можно посмотреть в `документации CMake
  <https://cmake.org/cmake/help /git-stage/variable/CMAKE_BUILD_TYPE.html>`__.

- `\-DTOOLCHAIN_CORTEX_CONFIG` — выбор ядра, для которого
  осуществляется компиляция. По-умолчанию, это *cortex-m3*, но возможны
  варианты *cortex-m0*, *cortex-m4* и *cortex-a9*.

- `\-GNinja` — выбор генератора, т.е. по сути это выбор формата
  генерируемых Makefile-ов. Так как мы используем Ninja, то флаг
  соответствующий;

- `\-DCMAKE_INSTALL_PREFIX` [опционально] — место установки
  бинарников и сопровождающих файлов. Может быть использовано при создании
  релизов, но для сборки не обязательно.

Итого получаем:

.. code-block:: bash

    $ mrdir build
    $ cd build
    $ cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/toolchain-clang.cmake -DTOOLCHAIN_CORTEX_CONFIG=cortex-m4 -DCMAKE_BUILD_TYPE=Release -GNinja ..

Если для запуска используется **PowerShell** необходимо указывать абсолютный
путь до toolchain-файла. Последние две точки в команде указывают на
расположение корневого `CMakeLists.txt` файла.


Сборка
------

Для сборки необходимо запустить следующую команду, находясь
в папке **emb/src/build**:

.. code-block:: bash

    $ cmake --build . --target all

Для сборки конкретной целим можно вместо ``all`` указать
имя цели, например

.. code-block:: bash

    $ cmake --build . --target my_subproject

Для сборки и установки используется команда

.. code-block:: bash

    $ cmake --build . --target install

Gitlab CI
=========

Для описания порядка работы с артефактами используется файл **.gitlab-ci.yml**.
В данном шаблоне представлена простейшая его реализация, которая позволяет
собрать проект на сервере Gitlab и скопировать полученные артефакты. В файле
необходимо исправить все пути до артефактов на актуальные и добавить
необходимые, если подпроектов больше, чем один.

В дальнейшем данный раздел будет описан подробнее, а шаблонный
**.gitlab-ci.yml** будет доработан.
